<nav>
    <ul class="pagination">
        @foreach (var link in Links)
        {
                <li @onclick=@(() => InternalSelectedPage(link)) style="cursor: pointer" class="page-item @(link.Enable ? null : "disabled") @(link.Enable ? "active" : null)">
                    <a class="page-link">@link.Text</a>
                </li>
        }
    </ul>
</nav>


@code {
    private const int TEN = 10;
    private int minIdx = 1;
    private int maxIdx = TEN;

    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    List<PageModel> Links = new();

    protected override void OnParametersSet()
    {
        Links = new List<PageModel>();

        bool previousLinkEnable = CurrentPage != 1;
        int previousLinkPage = CurrentPage - 1;
        Links.Add(new PageModel{Text = "Previous",Page = previousLinkPage,Enable = previousLinkEnable});

        if (TotalPages < maxIdx) maxIdx = TotalPages;
        if (maxIdx == 0) maxIdx = 10;
        if(CurrentPage == minIdx && minIdx > 1) { minIdx--; maxIdx--;}
        else if(CurrentPage == maxIdx && maxIdx < TotalPages){ minIdx++; maxIdx++; }
        for (int i = minIdx; i <= maxIdx; i++) 
            Links.Add(new PageModel { Page = i, Enable = CurrentPage == i, Text = $"{i}" });

        var linkNextEnable = CurrentPage < TotalPages;
        var linkNextPage = CurrentPage + 1;
        Links.Add(new PageModel{Text = "Next",Page = linkNextPage,Enable = linkNextEnable});
    }

    private async Task InternalSelectedPage(PageModel pageModel)
    {
        if (pageModel.Page == CurrentPage || pageModel.Page == 0 ||pageModel.Page > TotalPages)  return;      

        await SelectedPage.InvokeAsync(pageModel.Page);
    }

    class PageModel
    {
        public string Text { get; set; } = null!;
        public int Page { get; set; }
        public bool Enable { get; set; } = true;
        public bool Active { get; set; } = false;
    }
}
