@page "/cities/edit/{Id:int}"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Edit City</h3>

@if(city is null)
{
      <div class="align-items-center">
            <img src="https://cdnl.iconscout.com/lottie/premium/thumb/loading-dots-5711313-4752313.gif">
      </div>
}
else
{
    <CitiesForm @ref="citiesForm" City="city" OnValidSubmit="EditAsync" ReturnAction="Return"></CitiesForm>
}

@code {
    private City? city;
    private CitiesForm? citiesForm;

    private const string cities = "/cities";
    private const string prefix = $"/api{cities}/";

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Post<City>($"{prefix}retrieve/{Id}");
        if(responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                await sweetAlertService.FireAsync("Error", $"{nameof(City)} not found", SweetAlertIcon.Warning);
                return;
            }
            await sweetAlertService.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }

        city = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put($"{prefix}update", city);
        if(responseHttp.Error)
        {
            await sweetAlertService.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }
        citiesForm!.FormPostedSuccesfully = true;
        navigationManager.NavigateTo($"{cities}/{city!.StateId}");
    }

    private void Return()
    {
        citiesForm!.FormPostedSuccesfully = true;
        navigationManager.NavigateTo($"{cities}/{city!.StateId}");
    }
}
