@page "/cities/{StateId:int}"
@inject IRepository repository
@inject SweetAlertService alert
@inject NavigationManager navigationManager

@if(State is null)
{
      <div class="align-items-center">
            <img src="https://cdnl.iconscout.com/lottie/premium/thumb/loading-dots-5711313-4752313.gif">
      </div>
}
else
{
<h3>@Name</h3>

<Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPage" />    

    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
       <div class="mb-2">
          <a class="btn btn-primary" href="/cities/create/@StateId">New City</a>
          <a class="btn btn-success" href="/states/@State!.CountryId">Return</a>
    </div>
        <div class="mx-2">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar ciudad..." @bind-value="Filter" />
        </div>
        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
        </div>
    </div>

@if (cities.Length > 0)
{
<GenericList MyList="Cities">
    <Body>  
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Cities</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var city in Cities!)
            {
                <tr>
                    <td>
                        @city.Name
                    </td>
                    <td>
                        <a class="btn btn-warning" href="/cities/edit/@city.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="(() => DeleteAsync(city.Id))">Remove</button>
                    </td>
                </tr>   
            }
        </tbody>
    </table>
    </Body>
</GenericList>
}
}

@code {
    public List<City>? Cities { get; set; }
    private State? State{ get; set; }
    private string? Name { get; set; } = string.Empty;
    private int currentPage = 1;
    private int totalPages;

    private const string cities = "/cities";
    private const string prefix = $"/api{cities}/";

    [Parameter]
    public int StateId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected override  async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Post<State>($"/api/states/retrieve/{StateId}");
        State = responseHttp.Response;
        Name = State!.Name;
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = $"{prefix}retrieveAll/{StateId}?page={page}";
        string url2 = $"{prefix}totalPages/{StateId}";

        if (!string.IsNullOrEmpty(Filter))
        {
            url1 += $"&filter={Filter}";
            url2 += $"?filter={Filter}";
        }

        var responseHttp = await repository.Post<List<City>>(url1);
        if (responseHttp.Error) 
        {
            await alert.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }
        Cities = responseHttp.Response!.OrderBy(p => p.Name).ToList();       
            
        var responseHttp2 = await repository.Post<int>(url2);
        if (responseHttp2.Error) 
        {
            await alert.FireAsync("Error", await responseHttp2.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        } 
        totalPages = responseHttp2.Response!;        
    }

    private async Task DeleteAsync(int id)
    {        
        var result = await alert.Ask("Question", $"Do you want to delete this {nameof(City)}: {Cities!.Where(p => p.Id == id).FirstOrDefault()!.Name}?");
        if (!result) return;

        var responseHttp = await repository.Delete($"{prefix}delete/{id}");
        if(responseHttp.Error && responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
        {
            await alert.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();        
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }    
    
     private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }

}
