@page "/cities/{StateId:int}"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@if(State is null)
{
      <div class="align-items-center">
            <img src="https://cdnl.iconscout.com/lottie/premium/thumb/loading-dots-5711313-4752313.gif">
      </div>
}
else
{
<h3>@Name</h3>

    <div class="mb-2">
          <a class="btn btn-primary" href="/cities/create/@StateId">New City</a>
          <a class="btn btn-success" href="/states/@State!.CountryId">Return</a>
    </div>

@if (cities.Length > 0)
{
<GenericList MyList="Cities">
    <Body>  
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Cities</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var city in Cities!)
            {
                <tr>
                    <td>
                        @city.Name
                    </td>
                    <td>
                        <a class="btn btn-warning" href="/cities/edit/@city.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="(() => DeleteAsync(city.Id))">Remove</button>
                    </td>
                </tr>   
            }
        </tbody>
    </table>
    </Body>
</GenericList>
}
}




@code {
    public List<City>? Cities { get; set; }
    private State? State{ get; set; }
    private string? Name { get; set; } = string.Empty;

    private const string cities = "/cities";
    private const string prefix = $"/api{cities}/";

    [Parameter]
    public int StateId { get; set; }

    protected override  async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Post<State>($"/api/states/retrieve/{StateId}");
        State = responseHttp.Response;
        Name = State!.Name;
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            var responseHttp = await repository.Post<List<City>>($"{prefix}retrieve");
            Cities = responseHttp.Response!.Where(x => x.StateId == StateId).ToList();         
        }
        catch(Exception ex)
        {
            await sweetAlertService.FireAsync(ex.Message);
        }
    }

    private async Task DeleteAsync(int id)
    {        
        SweetAlertResult result = await sweetAlertService.FireAsync(new SweetAlertOptions()
                {
                    Title = "Confirmation",
                    Text = "Do you want to abandon this page, you will lost all content!",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    CancelButtonText = "No",
                    ConfirmButtonText = "Yes"
                });

        if (string.IsNullOrEmpty(result.Value)) return;

        var responseHttp = await repository.Delete($"{prefix}delete/{id}");
        if(responseHttp.Error && responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
        {
            await sweetAlertService.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();
    }
}
