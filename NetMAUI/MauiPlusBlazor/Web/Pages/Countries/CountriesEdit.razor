@page "/countries/edit/{Id:int}"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Country Edit</h3>

@if(country is null)
{
    <p>Loading...</p>
}
else
{
    <CountriesForm @ref="countriesForm" Country="country" OnValidSubmit="EditAsync" ReturnAction="Return"></CountriesForm>
}

@code {
    private Country? country;
    private CountriesForm? countriesForm;

    private const string countries = "/countries";
    private const string prefix = $"/api{countries}/";

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Post<Country>($"{prefix}retrieveById/{Id}");
        if(responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                await sweetAlertService.FireAsync("Error", "Country not found", SweetAlertIcon.Warning);
                return;
            }
            await sweetAlertService.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }

        country = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put($"{prefix}update", country);
        if(responseHttp.Error)
        {
            await sweetAlertService.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }
        countriesForm!.FormPostedSuccesfully = true;
        navigationManager.NavigateTo(countries);
    }

    private void Return()
    {
        countriesForm!.FormPostedSuccesfully = true;
        navigationManager.NavigateTo(countries);
    }
}
