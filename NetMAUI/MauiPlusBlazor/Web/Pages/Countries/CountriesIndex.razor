@page "/countries"
@inject IRepository repository
@inject SweetAlertService alert
@attribute [Authorize(Roles = "Admin")]

@if (Countries is null)
{
    <div class="spinner"/>
}
else
{
    <GenericList MyList="Countries">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Countries 
                        <a class="btn btn-sm btn-primary float-end" href="/countries/create"><i class="oi oi-plus"></i> Add Country</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search Country..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filter</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Clean</button>
                        </div>
                    </div>

                    <Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPage" />

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>País</th>
                                <th style="width:220px">Departamentos / Estados</th>
                                <th style="width:310px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var country in Countries!)
                            {
                                <tr>
                                    <td>
                                        @country.Name
                                    </td>
                                    <td>
                                        @country.StatesNumber
                                    </td>
                                    <td>
                                        <a href="/states/@country.Id" class="btn btn-info btn-sm"><i class="oi oi-list" /> View States</a>
                                        <a href="/countries/edit/@country.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Edit</a>
                                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(country.Id))><i class="oi oi-trash" /> Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>

}
@code {
    public List<Country>? Countries { get; set; }
    private int currentPage = 1;
    private int totalPages = 0;

    private const string countries = "/countries";
    private const string prefix = $"/api{countries}/";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected override  async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))page = Convert.ToInt32(Page);        

        string url1 = $"{prefix}retrieve?page={page}";
        string url2 = $"{prefix}totalPages";

        if (!string.IsNullOrEmpty(Filter))
        {
            url1 = $"{url1}&filter={Filter}";
            url2 = $"{url2}?filter={Filter}";
        }

        var responseHttp = await repository.Post<List<Country>>(url1);
        if (responseHttp.Error) 
        {
            await alert.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }
        Countries = responseHttp.Response!.OrderBy(p => p.Name).ToList();

        if (totalPages == 0)
        {
            var responseHttp2 = await repository.Post<int>(url2);
            if (responseHttp2.Error)
            {
                await alert.FireAsync("Error", await responseHttp2.GetErrorMessage(), SweetAlertIcon.Error);
                return;
            }
            totalPages = responseHttp2.Response!;
        }
    }

    private async Task DeleteAsync(int id)
    {
        var result = await alert.Ask("Question", $"Do you want to delete this {nameof(Country)}: {Countries!.Where(p => p.Id == id).FirstOrDefault()!.Name}?");
        if (!result) return;

        HttpResponseWrapper<object> responseHttp = await repository.Delete($"{prefix}delete/{id}");        
        if (responseHttp.Error) 
        {
            await alert.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }     

        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }      

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }

}
