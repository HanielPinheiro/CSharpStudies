@page "/countries"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Countries</h3>

 <a class="btn btn-primary" href="/countries/create">New Country</a>

<GenericList MyList="Countries">
    <Body>  
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Countries</th>
                <th>States</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var country in Countries!)
            {
                <tr>
                    <td>
                        @country.Name
                    </td>
                    <td>
                        @country.StatesNumber
                    </td>
                    <td>
                        <a class="btn btn-info" href="/states/@country.Id">View States</a>
                        <a class="btn btn-warning" href="/countries/edit/@country.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="(() => DeleteAsync(country.Id))">Remove</button>
                    </td>
                </tr>   
            }
        </tbody>
    </table>
    </Body>
</GenericList>

@code {
    public List<Country>? Countries { get; set; }
    private const string countries = "/countries";
    private const string prefix = $"/api{countries}/";

    protected override  async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Post<List<Country>>($"{prefix}retrieve");
        Countries = responseHttp.Response!.OrderBy(p => p.Name).ToList(); 
    }

    private async Task DeleteAsync(int id)
    {        
        SweetAlertResult result = await sweetAlertService.FireAsync(new SweetAlertOptions()
                {
                    Title = "Confirmation",
                    Text = "Do you want to abandon this page, you will lost all content!",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    CancelButtonText = "No",
                    ConfirmButtonText = "Yes"
                });

        if (string.IsNullOrEmpty(result.Value)) return;

        var responseHttp = await repository.Delete($"{prefix}delete/{id}");
        if(responseHttp.Error && responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
        {
            await sweetAlertService.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();
    }
}
