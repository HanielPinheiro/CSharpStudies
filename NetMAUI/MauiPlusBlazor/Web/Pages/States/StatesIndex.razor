@page "/states/{CountryId:int}"
@inject IRepository repository
@inject SweetAlertService alert

@if (country is null)
{
      <div class="align-items-center">
            <img src="https://cdnl.iconscout.com/lottie/premium/thumb/loading-dots-5711313-4752313.gif">
      </div>
}
else
{
    <h3>@country.Name</h3>

    

      <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
       <div class="mb-2">
          <a class="btn btn-primary" href="/states/create/@CountryId">New State</a>
          <a class="btn btn-success" href="/countries">Return</a>
        </div>
        <div class="mx-2">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar estado/departamento..." @bind-value="Filter" />
        </div>
        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
        </div>
    </div>

     <Pagination CurrentPage="currentPage"TotalPages="totalPages"  SelectedPage="SelectedPage" />
    
<GenericList MyList="states">
    <Body>  
    <table class="table table-striped">
        <thead>
            <tr>
                <th>States</th>
                <th>Cities</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var state in states!)
            {
                <tr>
                    <td>
                        @state.Name
                    </td>
                    <td>
                        @state.CitiesNumber
                    </td>
                    <td>
                        <a class="btn btn-info" href="/cities/@state.Id">View Cities</a>
                        <a class="btn btn-warning" href="/states/edit/@state.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="(() => DeleteAsync(state.Id))">Remove</button>
                    </td>
                </tr>   
            }
        </tbody>
    </table>
    </Body>
</GenericList>
}

@code {
    private Country? country;
    private List<State>? states;
    private int currentPage = 1;
    private int totalPages;

    private const string statesConst = "/states";
    private const string prefixStates= $"/api{statesConst}/";

    private const string countriesConst = "/countries";
    private const string prefixCountries= $"/api{countriesConst}/";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    [Parameter]
    public int CountryId { get; set; }

    protected override  async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page)) page = Convert.ToInt32(Page);


        string url1 = $"{prefixStates}retrieveAll/{CountryId}?page={page}";
        string url2 = $"{prefixStates}totalPages/{CountryId}";

        if (!string.IsNullOrEmpty(Filter))
        {
            url1 += $"&filter={Filter}";
            url2 += $"?filter={Filter}";
        }

        var responseHttp = await repository.Post<Country>($"{prefixCountries}retrieve/{CountryId}");
        if (responseHttp.Error) 
        {
            await alert.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }
        country = responseHttp.Response;
       
        var responseHttp2 = await repository.Post<List<State>>(url1);
        if (responseHttp2.Error) 
        {
            await alert.FireAsync("Error", await responseHttp2.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }
        states = responseHttp2.Response!.OrderBy(x => x.Name).ToList();

        var responseHttp3 = await repository.Post<int>(url2);
        if (responseHttp3.Error) 
        {
          await alert.FireAsync("Error", await responseHttp3.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }
        totalPages = responseHttp3.Response;
    }

    private async Task DeleteAsync(int id)
    {        
        var result = await alert.Ask("Question", $"Do you want to delete this {nameof(State)}: {states!.Where(p => p.Id == id).FirstOrDefault()!.Name}?");
        if (!result) return;

        var responseHttp = await repository.Delete($"{prefixStates}delete/{id}");        
        if (responseHttp.Error) 
        {
          await alert.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }       

        await LoadAsync();
    }
    
    private async Task SelectedPage(int page)
    {
        if (page == totalPages + 1) return;
        currentPage = page;
        await LoadAsync(page);
    }
    
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }

 }
