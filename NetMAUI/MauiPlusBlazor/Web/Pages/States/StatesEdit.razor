@page "/states/edit/{StateId:int}"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>State Edit</h3>

@if(state is null)
{
      <div class="align-items-center">
            <img src="https://cdnl.iconscout.com/lottie/premium/thumb/loading-dots-5711313-4752313.gif">
      </div>
}
else
{
    <StatesForm @ref="statesForm" State="state" OnValidSubmit="EditAsync" ReturnAction="Return"></StatesForm>
}

@code {
    private State? state;
    private StatesForm? statesForm;

    private const string states = "/states";
    private const string prefix = $"/api{states}/";

    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Post<State>($"{prefix}retrieve/{StateId}");
        if(responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                await sweetAlertService.FireAsync("Error", "Country not found", SweetAlertIcon.Warning);
                return;
            }
            await sweetAlertService.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put($"{prefix}update", state);
        if(responseHttp.Error)
        {
            await sweetAlertService.FireAsync("Error", await responseHttp.GetErrorMessage(), SweetAlertIcon.Error);
            return;
        }
        statesForm!.FormPostedSuccesfully = true;
        navigationManager.NavigateTo($"{states}/{state!.CountryId}");
    }

    private void Return()
    {
        statesForm!.FormPostedSuccesfully = true;
        navigationManager.NavigateTo($"{states}/{state!.CountryId}");
    }
}
